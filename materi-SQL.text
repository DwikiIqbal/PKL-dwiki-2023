DATABASE

A. Perintah Dalam SQL (structured Query Language)

- DDL (Data Definition Language):
DDL digunakan untuk membuat, mengubah, dan menghapus objek basis data seperti tabel, indeks, dan konstrain. Beberapa contoh perintah DDL antara lain:
   CREATE
   ALTER
   DROP
   
- DML (Data Manipulation Language):
DML digunakan untuk menambah, mengubah, dan menghapus data dalam tabel yang sudah ada. Beberapa contoh perintah DML antara lain:
   INSERT
   UPDATE
   DELETE
   
- DCL (Data Control Language):
DCL digunakan untuk mengontrol akses ke objek basis data. Beberapa contoh perintah DCL antara lain:
   GRANT 
   REVOKE

B. Type data
beberapa jenis tipe data yang umum digunakan dalam basis data, beserta penjelasan dan contohnya:

- INTEGER: untuk menyimpan nilai bilangan bulat. Tipe data ini dapat menyimpan nilai positif atau negatif. Contoh: 1, 2, 3, -1, -2, -3. Tidak disarankan menggunakan parameter
CREATE TABLE nama_tabel (
   id INTEGER PRIMARY KEY,
   umur INTEGER NOT NULL,
   jumlah_anak INTEGER
);

- VARCHAR: untuk menyimpan data karakter atau string. Tipe data ini memiliki panjang yang dapat bervariasi. Contoh: "Hello", "World", "John", "Doe".
CREATE TABLE nama_tabel (
   nama VARCHAR(50) NOT NULL,
   alamat VARCHAR(100),
   kota VARCHAR(50) NOT NULL
);

- BOOLEAN: untuk menyimpan nilai true atau false. Contoh: true, false.
CREATE TABLE nama_tabel (
   id INTEGER PRIMARY KEY,
   aktif BOOLEAN NOT NULL
);

- DATE   : untuk menyimpan nilai tanggal. Tipe data ini biasanya digunakan untuk menyimpan tanggal dalam format YYYY-MM-DD. Contoh: 2023-02-16.
CREATE TABLE nama_tabel (
   id INTEGER PRIMARY KEY,
   tanggal_lahir DATE,
   tanggal_terdaftar DATE NOT NULL
);

- FLOAT  : untuk menyimpan bilangan pecahan atau desimal. Tipe data ini memiliki presisi yang lebih rendah dibandingkan dengan tipe data DECIMAL. Contoh: 3.14, 0.1234, 1.0.
CREATE TABLE nama_tabel (
   id INTEGER PRIMARY KEY,
   harga FLOAT NOT NULL
);

- DECIMAL: untuk menyimpan bilangan pecahan atau desimal dengan presisi yang lebih tinggi. Tipe data ini biasanya digunakan untuk menghitung uang atau nilai yang memerlukan presisi tinggi. Contoh: 1.23, 1000.00, 0.05.
CREATE TABLE nama_tabel (
   id INTEGER PRIMARY KEY,
   gaji DECIMAL(10, 2) NOT NULL
);

- TIME   : untuk menyimpan nilai waktu. Tipe data ini biasanya digunakan untuk menyimpan waktu dalam format HH:MM:SS. Contoh: 12:00:00, 13:30:45.
CREATE TABLE nama_tabel (
   id INTEGER PRIMARY KEY,
   waktu_mulai TIME,
   waktu_selesai TIME NOT NULL
);

- TEXT   : untuk menyimpan data karakter atau string yang panjangnya melebihi batas panjang yang bisa ditampung oleh VARCHAR. Tipe data ini biasanya digunakan untuk menyimpan data teks panjang seperti dokumen atau catatan. Contoh: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed aliquam velit in felis iaculis, non laoreet massa eleifend."
CREATE TABLE nama_tabel (
   id INTEGER PRIMARY KEY,
   deskripsi TEXT
);

CATATAN TAMBAHAN
*Primary key => untuk mengidentifikasi secara unik setiap baris atau record dalam sebuah tabel. 
CREATE TABLE mahasiswa (
   nim INTEGER PRIMARY KEY,
   nama VARCHAR(50) NOT NULL,
   alamat VARCHAR(100),
   tanggal_lahir DATE,
   jurusan VARCHAR(50) NOT NULL
);

atau 

CREATE TABLE mahasiswa (
   nim INT,
   nama VARCHAR(50) NOT NULL,
   alamat VARCHAR(100),
   tanggal_lahir DATE,
   jurusan VARCHAR(50) NOT NULL
   primary key('nim')
);

*NOT NULL => digunakan ketika ingin dijadikan sebagai kolom kosong

*Cara membuat table 
CREATE TABLE <nama_table> {
   coloumn1,
   coloum2,
   ...
}
*Cara melihat struktur table yang sudah dibuat
SHOW CREATE TABLE table_name

*Cara membuat ulang table atau menghapus semua data pada table
TRUNCATE table_name

*Cara mengisi kolom pada table
INSERT INTO table_name (column1, coloumn2, ...) VALUES (apa yang ingin diisi dengan tanda kutip satu '')
note => VARCHAR & CHAR perlu menggunakan '' , sedangkan int tidak perlu

*Cara update isi kolom
UPDATE table_name SET column1 = value1, column2 = value2, ... WHERE condition;

*Cara mengambil data dari tabel
SELECT column1, column2, ... FROM table_name

*Cara mengambil data sesuai yang kita inginkan
SELECT * FROM table_name WHERE condition
*Cara mengambilkan hanya nilai yang berbeda(mengatasi isi data yang banyak duplikatnya)
SELECT DISTINCT column1, column2, ... FROM table_name;

*Operator AND menampilkan record jika semua kondisi dipisahkan dengan AND BENAR.
SELECT column1, column2, ... FROM table_name WHERE condition1 AND condition2 AND condition3 ...;

*Cara menggabungkan AND dan OR
SELECT * FROM Customers
WHERE Country='Germany' AND (City='Berlin' OR City='MÃ¼nchen');

*Cara menggabungkan AND dan NOT
SELECT * FROM Customers
WHERE NOT Country='Germany' AND NOT Country='USA';

*Operator OR menampilkan catatan jika salah satu kondisi yang dipisahkan oleh ORadalah BENAR.
SELECT column1, column2, ... FROM table_name WHERE condition1 OR condition2 OR condition3 ...;

*Operator NOT menampilkan catatan jika kondisinya TIDAK BENAR.
SELECT column1, column2, ... FROM table_name WHERE NOT condition;

*Cara Mengubah nama column & table 
ALTER TABLE table_name RENAME COLOUMN old_column TO new_column;
ALTER TABLE table_name RENAME TO new_table_name

*Cara Mengubah type data pada sebuah column
ALTER TABLE table_name ALTER COLUMN column_name TYPE type_data;

*Cara Mengurutkan column table sesuai urutan huruf
SELECT * FROM table_name ORDER BY column_name ASC  (untuk urutan huruf dari atas)
SELECT * FROM table_name ORDER BY column_name DESC (untuk urutan huruf dari bawah)
SELECT * FROM table_name ORDER BY column_name ASC/DESC LIMIT 1 (untuk membatasi column yang dihasilkan)

*Cara Menghapus kolom pada table database
ALTER TABLE table_name DROP COLUMN column_name;

*Cara Menghapus data pada table 
DELETE FROM table_name WHERE condition;

*Cara mengelompokkan penjualan berdasarkan nama produk, dan menampilkan total kuantitas produk yang terjual.
SELECT product_name, SUM(quantity) FROM sales GROUP BY product_name;

*Cara menampilkan beberapa data teratas
SELECT TOP 3 * FROM table_name;

*Cara menampilkan data sesuai yang kita butuhkan
SELECT * FROM table_name LIMIT 3;

*Cara menemukan nominal terendah
SELECT MIN(column_name/price) AS SmallestPrice/alias_name FROM table_name;

*Cara menemukan nominal tertinggi
SELECT MAX(column_name/price) AS LargestPrice/alias_name FROM table_name;

*Cara mengembalikan jumlah baris yang cocok dengan kriteria yang ditentukan
SELECT COUNT(column_name)
FROM table_name
WHERE condition;

*Cara mengembalikan nilai rata rata kolom numerik
SELECT AVG(column_name)
FROM table_name
WHERE condition;

*Cara mengembalikan jumlah total kolom numerik
SELECT SUM(column_name)
FROM table_name
WHERE condition;

*Cara mencari pola tertentu dalam kolom
SELECT column1, column2, ...
FROM table_name
WHERE columnN LIKE pattern;

WHERE CustomerName LIKE 'a%'	memilih semua pelanggan dengan CustomerName dimulai dengan "a":
WHERE CustomerName LIKE '%a'	memilih semua pelanggan dengan CustomerName diakhiri dengan "a":
WHERE CustomerName LIKE '%or%'	memilih semua pelanggan dengan CustomerName yang memiliki "or" di posisi apa pun:
WHERE CustomerName LIKE '_r%'	memilih semua pelanggan dengan CustomerName yang memiliki "r" di posisi kedua:
WHERE CustomerName LIKE 'a_%'	memilih semua pelanggan dengan CustomerName yang dimulai dengan "a" dan panjangnya minimal 2 karakter:
WHERE CustomerName LIKE 'a__%'	memilih semua pelanggan dengan CustomerName yang dimulai dengan "a" dan panjangnya minimal 3 karakter:
WHERE ContactName LIKE 'a%o'	memilih semua pelanggan dengan ContactName yang dimulai dengan "a" dan diakhiri dengan "o":

*Cara memberi alias pada sebuah kolom
SELECT column1 as 'nama alias',
       column2 as 'nama alias'
FROM table_name;

atau

SELECT (nama alias dari table_name).column1 as 'nama alias',
       (nama alias dari table_name).column2 as 'nama alias'
FROM table_name as 'nama alias';

*Cara mencari data yang berisi NULL 
SELECT * FROM table_name WHERE column1 IS NULL/NOT NULL;

*Cara mencari data yang <= dan >= secara sekaligus
SELECT * FROM table_name WHERE BETWEEN 10000 AND 20000;

*Cara melakukan pencarian sebuah kolom dengan beberapa nilai
SELECT * FROM table_name WHERE column IN ('opsi1', 'opsi2')









